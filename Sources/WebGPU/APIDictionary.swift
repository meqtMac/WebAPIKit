//
//  File.swift
//  
//
//  Created by 蒋艺 on 2023/9/17.
//

import Foundation
import JavaScriptKit
public typealias GPUBufferUsageFlags = UInt32
public typealias GPUMapModeFlags = UInt32
public typealias GPUTextureUsageFlags = UInt32
public typealias GPUShaderStageFlags = UInt32

public typealias GPUPipelineConstantValue = Double
public typealias GPUColorWriteFlags = UInt32

public typealias GPUBufferDynamicOffset = UInt32
public typealias GPUStencilValue = UInt32
public typealias GPUSampleMask = UInt32
public typealias GPUDepthBias = Int32
public typealias GPUSize64 = UInt64
public typealias GPUIntegerCoordinate = UInt32
public typealias GPUIndex32 = UInt32
public typealias GPUSize32 = UInt32
public typealias GPUSignedOffset32 = Int32
public typealias GPUSize64Out = UInt64
public typealias GPUIntegerCoordinateOut = UInt32
public typealias GPUSize32Out = UInt32
public typealias GPUFlagsConstant = UInt32


extension JSString {
    @usableFromInline static let _self: JSString = "self"
    @usableFromInline static let GPU: JSString = "GPU"
    @usableFromInline static let GPUAdapter: JSString = "GPUAdapter"
    @usableFromInline static let GPUAdapterInfo: JSString = "GPUAdapterInfo"
    @usableFromInline static let GPUBindGroup: JSString = "GPUBindGroup"
    @usableFromInline static let GPUBindGroupLayout: JSString = "GPUBindGroupLayout"
    @usableFromInline static let GPUBuffer: JSString = "GPUBuffer"
    @usableFromInline static let GPUBufferUsage: JSString = "GPUBufferUsage"
    @usableFromInline static let GPUCanvasContext: JSString = "GPUCanvasContext"
    @usableFromInline static let GPUColorWrite: JSString = "GPUColorWrite"
    @usableFromInline static let GPUCommandBuffer: JSString = "GPUCommandBuffer"
    @usableFromInline static let GPUCommandEncoder: JSString = "GPUCommandEncoder"
    @usableFromInline static let GPUCompilationInfo: JSString = "GPUCompilationInfo"
    @usableFromInline static let GPUCompilationMessage: JSString = "GPUCompilationMessage"
    @usableFromInline static let GPUComputePassEncoder: JSString = "GPUComputePassEncoder"
    @usableFromInline static let GPUComputePipeline: JSString = "GPUComputePipeline"
    @usableFromInline static let GPUDevice: JSString = "GPUDevice"
    @usableFromInline static let GPUDeviceLostInfo: JSString = "GPUDeviceLostInfo"
    @usableFromInline static let GPUError: JSString = "GPUError"
    @usableFromInline static let GPUExternalTexture: JSString = "GPUExternalTexture"
    @usableFromInline static let GPUInternalError: JSString = "GPUInternalError"
    @usableFromInline static let GPUMapMode: JSString = "GPUMapMode"
    @usableFromInline static let GPUOutOfMemoryError: JSString = "GPUOutOfMemoryError"
    @usableFromInline static let GPUPipelineError: JSString = "GPUPipelineError"
    @usableFromInline static let GPUPipelineLayout: JSString = "GPUPipelineLayout"
    @usableFromInline static let GPUQuerySet: JSString = "GPUQuerySet"
    @usableFromInline static let GPUQueue: JSString = "GPUQueue"
    @usableFromInline static let GPURenderBundle: JSString = "GPURenderBundle"
    @usableFromInline static let GPURenderBundleEncoder: JSString = "GPURenderBundleEncoder"
    @usableFromInline static let GPURenderPassEncoder: JSString = "GPURenderPassEncoder"
    @usableFromInline static let GPURenderPipeline: JSString = "GPURenderPipeline"
    @usableFromInline static let GPUSampler: JSString = "GPUSampler"
    @usableFromInline static let GPUShaderModule: JSString = "GPUShaderModule"
    @usableFromInline static let GPUShaderStage: JSString = "GPUShaderStage"
    @usableFromInline static let GPUSupportedFeatures: JSString = "GPUSupportedFeatures"
    @usableFromInline static let GPUSupportedLimits: JSString = "GPUSupportedLimits"
    @usableFromInline static let GPUTexture: JSString = "GPUTexture"
    @usableFromInline static let GPUTextureUsage: JSString = "GPUTextureUsage"
    @usableFromInline static let GPUTextureView: JSString = "GPUTextureView"
    @usableFromInline static let GPUUncapturedErrorEvent: JSString = "GPUUncapturedErrorEvent"
    @usableFromInline static let GPUValidationError: JSString = "GPUValidationError"
    @usableFromInline static let Object: JSString = "Object"
    @usableFromInline static let WGSLLanguageFeatures: JSString = "WGSLLanguageFeatures"
    @usableFromInline static let a: JSString = "a"
    @usableFromInline static let access: JSString = "access"
    @usableFromInline static let addressModeU: JSString = "addressModeU"
    @usableFromInline static let addressModeV: JSString = "addressModeV"
    @usableFromInline static let addressModeW: JSString = "addressModeW"
    @usableFromInline static let alpha: JSString = "alpha"
    @usableFromInline static let alphaMode: JSString = "alphaMode"
    @usableFromInline static let alphaToCoverageEnabled: JSString = "alphaToCoverageEnabled"
    @usableFromInline static let architecture: JSString = "architecture"
    @usableFromInline static let arrayLayerCount: JSString = "arrayLayerCount"
    @usableFromInline static let arrayStride: JSString = "arrayStride"
    @usableFromInline static let aspect: JSString = "aspect"
    @usableFromInline static let attributes: JSString = "attributes"
    @usableFromInline static let b: JSString = "b"
    @usableFromInline static let baseArrayLayer: JSString = "baseArrayLayer"
    @usableFromInline static let baseMipLevel: JSString = "baseMipLevel"
    @usableFromInline static let beginComputePass: JSString = "beginComputePass"
    @usableFromInline static let beginOcclusionQuery: JSString = "beginOcclusionQuery"
    @usableFromInline static let beginRenderPass: JSString = "beginRenderPass"
    @usableFromInline static let beginningOfPassWriteIndex: JSString = "beginningOfPassWriteIndex"
    @usableFromInline static let bindGroupLayouts: JSString = "bindGroupLayouts"
    @usableFromInline static let binding: JSString = "binding"
    @usableFromInline static let blend: JSString = "blend"
    @usableFromInline static let buffer: JSString = "buffer"
    @usableFromInline static let buffers: JSString = "buffers"
    @usableFromInline static let bytesPerRow: JSString = "bytesPerRow"
    @usableFromInline static let canvas: JSString = "canvas"
    @usableFromInline static let clearBuffer: JSString = "clearBuffer"
    @usableFromInline static let clearValue: JSString = "clearValue"
    @usableFromInline static let code: JSString = "code"
    @usableFromInline static let color: JSString = "color"
    @usableFromInline static let colorAttachments: JSString = "colorAttachments"
    @usableFromInline static let colorFormats: JSString = "colorFormats"
    @usableFromInline static let colorSpace: JSString = "colorSpace"
    @usableFromInline static let compare: JSString = "compare"
    @usableFromInline static let compute: JSString = "compute"
    @usableFromInline static let configure: JSString = "configure"
    @usableFromInline static let constants: JSString = "constants"
    @usableFromInline static let copyBufferToBuffer: JSString = "copyBufferToBuffer"
    @usableFromInline static let copyBufferToTexture: JSString = "copyBufferToTexture"
    @usableFromInline static let copyExternalImageToTexture: JSString = "copyExternalImageToTexture"
    @usableFromInline static let copyTextureToBuffer: JSString = "copyTextureToBuffer"
    @usableFromInline static let copyTextureToTexture: JSString = "copyTextureToTexture"
    @usableFromInline static let count: JSString = "count"
    @usableFromInline static let createBindGroup: JSString = "createBindGroup"
    @usableFromInline static let createBindGroupLayout: JSString = "createBindGroupLayout"
    @usableFromInline static let createBuffer: JSString = "createBuffer"
    @usableFromInline static let createCommandEncoder: JSString = "createCommandEncoder"
    @usableFromInline static let createComputePipeline: JSString = "createComputePipeline"
    @usableFromInline static let createComputePipelineAsync: JSString = "createComputePipelineAsync"
    @usableFromInline static let createPipelineLayout: JSString = "createPipelineLayout"
    @usableFromInline static let createQuerySet: JSString = "createQuerySet"
    @usableFromInline static let createRenderBundleEncoder: JSString = "createRenderBundleEncoder"
    @usableFromInline static let createRenderPipeline: JSString = "createRenderPipeline"
    @usableFromInline static let createRenderPipelineAsync: JSString = "createRenderPipelineAsync"
    @usableFromInline static let createSampler: JSString = "createSampler"
    @usableFromInline static let createShaderModule: JSString = "createShaderModule"
    @usableFromInline static let createTexture: JSString = "createTexture"
    @usableFromInline static let createView: JSString = "createView"
    @usableFromInline static let cullMode: JSString = "cullMode"
    @usableFromInline static let defaultQueue: JSString = "defaultQueue"
    @usableFromInline static let depthBias: JSString = "depthBias"
    @usableFromInline static let depthBiasClamp: JSString = "depthBiasClamp"
    @usableFromInline static let depthBiasSlopeScale: JSString = "depthBiasSlopeScale"
    @usableFromInline static let depthClearValue: JSString = "depthClearValue"
    @usableFromInline static let depthCompare: JSString = "depthCompare"
    @usableFromInline static let depthFailOp: JSString = "depthFailOp"
    @usableFromInline static let depthLoadOp: JSString = "depthLoadOp"
    @usableFromInline static let depthOrArrayLayers: JSString = "depthOrArrayLayers"
    @usableFromInline static let depthReadOnly: JSString = "depthReadOnly"
    @usableFromInline static let depthStencil: JSString = "depthStencil"
    @usableFromInline static let depthStencilAttachment: JSString = "depthStencilAttachment"
    @usableFromInline static let depthStencilFormat: JSString = "depthStencilFormat"
    @usableFromInline static let depthStoreOp: JSString = "depthStoreOp"
    @usableFromInline static let depthWriteEnabled: JSString = "depthWriteEnabled"
    @usableFromInline static let description: JSString = "description"
    @usableFromInline static let destroy: JSString = "destroy"
    @usableFromInline static let device: JSString = "device"
    @usableFromInline static let dimension: JSString = "dimension"
    @usableFromInline static let dispatchWorkgroups: JSString = "dispatchWorkgroups"
    @usableFromInline static let dispatchWorkgroupsIndirect: JSString = "dispatchWorkgroupsIndirect"
    @usableFromInline static let draw: JSString = "draw"
    @usableFromInline static let drawIndexed: JSString = "drawIndexed"
    @usableFromInline static let drawIndexedIndirect: JSString = "drawIndexedIndirect"
    @usableFromInline static let drawIndirect: JSString = "drawIndirect"
    @usableFromInline static let dstFactor: JSString = "dstFactor"
    @usableFromInline static let end: JSString = "end"
    @usableFromInline static let endOcclusionQuery: JSString = "endOcclusionQuery"
    @usableFromInline static let endOfPassWriteIndex: JSString = "endOfPassWriteIndex"
    @usableFromInline static let entries: JSString = "entries"
    @usableFromInline static let entryPoint: JSString = "entryPoint"
    @usableFromInline static let error: JSString = "error"
    @usableFromInline static let executeBundles: JSString = "executeBundles"
    @usableFromInline static let externalTexture: JSString = "externalTexture"
    @usableFromInline static let failOp: JSString = "failOp"
    @usableFromInline static let features: JSString = "features"
    @usableFromInline static let finish: JSString = "finish"
    @usableFromInline static let flipY: JSString = "flipY"
    @usableFromInline static let forceFallbackAdapter: JSString = "forceFallbackAdapter"
    @usableFromInline static let format: JSString = "format"
    @usableFromInline static let fragment: JSString = "fragment"
    @usableFromInline static let frontFace: JSString = "frontFace"
    @usableFromInline static let g: JSString = "g"
    @usableFromInline static let getBindGroupLayout: JSString = "getBindGroupLayout"
    @usableFromInline static let getCompilationInfo: JSString = "getCompilationInfo"
    @usableFromInline static let getCurrentTexture: JSString = "getCurrentTexture"
    @usableFromInline static let getMappedRange: JSString = "getMappedRange"
    @usableFromInline static let getPreferredCanvasFormat: JSString = "getPreferredCanvasFormat"
    @usableFromInline static let gpu: JSString = "gpu"
    @usableFromInline static let hasDynamicOffset: JSString = "hasDynamicOffset"
    @usableFromInline static let height: JSString = "height"
    @usableFromInline static let hints: JSString = "hints"
    @usableFromInline static let importExternalTexture: JSString = "importExternalTexture"
    @usableFromInline static let insertDebugMarker: JSString = "insertDebugMarker"
    @usableFromInline static let isFallbackAdapter: JSString = "isFallbackAdapter"
    @usableFromInline static let label: JSString = "label"
    @usableFromInline static let layout: JSString = "layout"
    @usableFromInline static let length: JSString = "length"
    @usableFromInline static let limits: JSString = "limits"
    @usableFromInline static let lineNum: JSString = "lineNum"
    @usableFromInline static let linePos: JSString = "linePos"
    @usableFromInline static let loadOp: JSString = "loadOp"
    @usableFromInline static let lodMaxClamp: JSString = "lodMaxClamp"
    @usableFromInline static let lodMinClamp: JSString = "lodMinClamp"
    @usableFromInline static let lost: JSString = "lost"
    @usableFromInline static let magFilter: JSString = "magFilter"
    @usableFromInline static let mapAsync: JSString = "mapAsync"
    @usableFromInline static let mapState: JSString = "mapState"
    @usableFromInline static let mappedAtCreation: JSString = "mappedAtCreation"
    @usableFromInline static let mask: JSString = "mask"
    @usableFromInline static let maxAnisotropy: JSString = "maxAnisotropy"
    @usableFromInline static let maxBindGroups: JSString = "maxBindGroups"
    @usableFromInline static let maxBindGroupsPlusVertexBuffers: JSString = "maxBindGroupsPlusVertexBuffers"
    @usableFromInline static let maxBindingsPerBindGroup: JSString = "maxBindingsPerBindGroup"
    @usableFromInline static let maxBufferSize: JSString = "maxBufferSize"
    @usableFromInline static let maxColorAttachmentBytesPerSample: JSString = "maxColorAttachmentBytesPerSample"
    @usableFromInline static let maxColorAttachments: JSString = "maxColorAttachments"
    @usableFromInline static let maxComputeInvocationsPerWorkgroup: JSString = "maxComputeInvocationsPerWorkgroup"
    @usableFromInline static let maxComputeWorkgroupSizeX: JSString = "maxComputeWorkgroupSizeX"
    @usableFromInline static let maxComputeWorkgroupSizeY: JSString = "maxComputeWorkgroupSizeY"
    @usableFromInline static let maxComputeWorkgroupSizeZ: JSString = "maxComputeWorkgroupSizeZ"
    @usableFromInline static let maxComputeWorkgroupStorageSize: JSString = "maxComputeWorkgroupStorageSize"
    @usableFromInline static let maxComputeWorkgroupsPerDimension: JSString = "maxComputeWorkgroupsPerDimension"
    @usableFromInline static let maxDrawCount: JSString = "maxDrawCount"
    @usableFromInline static let maxDynamicStorageBuffersPerPipelineLayout: JSString = "maxDynamicStorageBuffersPerPipelineLayout"
    @usableFromInline static let maxDynamicUniformBuffersPerPipelineLayout: JSString = "maxDynamicUniformBuffersPerPipelineLayout"
    @usableFromInline static let maxInterStageShaderComponents: JSString = "maxInterStageShaderComponents"
    @usableFromInline static let maxInterStageShaderVariables: JSString = "maxInterStageShaderVariables"
    @usableFromInline static let maxSampledTexturesPerShaderStage: JSString = "maxSampledTexturesPerShaderStage"
    @usableFromInline static let maxSamplersPerShaderStage: JSString = "maxSamplersPerShaderStage"
    @usableFromInline static let maxStorageBufferBindingSize: JSString = "maxStorageBufferBindingSize"
    @usableFromInline static let maxStorageBuffersPerShaderStage: JSString = "maxStorageBuffersPerShaderStage"
    @usableFromInline static let maxStorageTexturesPerShaderStage: JSString = "maxStorageTexturesPerShaderStage"
    @usableFromInline static let maxTextureArrayLayers: JSString = "maxTextureArrayLayers"
    @usableFromInline static let maxTextureDimension1D: JSString = "maxTextureDimension1D"
    @usableFromInline static let maxTextureDimension2D: JSString = "maxTextureDimension2D"
    @usableFromInline static let maxTextureDimension3D: JSString = "maxTextureDimension3D"
    @usableFromInline static let maxUniformBufferBindingSize: JSString = "maxUniformBufferBindingSize"
    @usableFromInline static let maxUniformBuffersPerShaderStage: JSString = "maxUniformBuffersPerShaderStage"
    @usableFromInline static let maxVertexAttributes: JSString = "maxVertexAttributes"
    @usableFromInline static let maxVertexBufferArrayStride: JSString = "maxVertexBufferArrayStride"
    @usableFromInline static let maxVertexBuffers: JSString = "maxVertexBuffers"
    @usableFromInline static let message: JSString = "message"
    @usableFromInline static let messages: JSString = "messages"
    @usableFromInline static let minBindingSize: JSString = "minBindingSize"
    @usableFromInline static let minFilter: JSString = "minFilter"
    @usableFromInline static let minStorageBufferOffsetAlignment: JSString = "minStorageBufferOffsetAlignment"
    @usableFromInline static let minUniformBufferOffsetAlignment: JSString = "minUniformBufferOffsetAlignment"
    @usableFromInline static let mipLevel: JSString = "mipLevel"
    @usableFromInline static let mipLevelCount: JSString = "mipLevelCount"
    @usableFromInline static let mipmapFilter: JSString = "mipmapFilter"
    @usableFromInline static let module: JSString = "module"
    @usableFromInline static let multisample: JSString = "multisample"
    @usableFromInline static let multisampled: JSString = "multisampled"
    @usableFromInline static let occlusionQuerySet: JSString = "occlusionQuerySet"
    @usableFromInline static let offset: JSString = "offset"
    @usableFromInline static let onSubmittedWorkDone: JSString = "onSubmittedWorkDone"
    @usableFromInline static let onuncapturederror: JSString = "onuncapturederror"
    @usableFromInline static let operation: JSString = "operation"
    @usableFromInline static let origin: JSString = "origin"
    @usableFromInline static let passOp: JSString = "passOp"
    @usableFromInline static let popDebugGroup: JSString = "popDebugGroup"
    @usableFromInline static let popErrorScope: JSString = "popErrorScope"
    @usableFromInline static let powerPreference: JSString = "powerPreference"
    @usableFromInline static let premultipliedAlpha: JSString = "premultipliedAlpha"
    @usableFromInline static let primitive: JSString = "primitive"
    @usableFromInline static let pushDebugGroup: JSString = "pushDebugGroup"
    @usableFromInline static let pushErrorScope: JSString = "pushErrorScope"
    @usableFromInline static let querySet: JSString = "querySet"
    @usableFromInline static let queue: JSString = "queue"
    @usableFromInline static let r: JSString = "r"
    @usableFromInline static let reason: JSString = "reason"
    @usableFromInline static let requestAdapter: JSString = "requestAdapter"
    @usableFromInline static let requestAdapterInfo: JSString = "requestAdapterInfo"
    @usableFromInline static let requestDevice: JSString = "requestDevice"
    @usableFromInline static let requiredFeatures: JSString = "requiredFeatures"
    @usableFromInline static let requiredLimits: JSString = "requiredLimits"
    @usableFromInline static let resolveQuerySet: JSString = "resolveQuerySet"
    @usableFromInline static let resolveTarget: JSString = "resolveTarget"
    @usableFromInline static let resource: JSString = "resource"
    @usableFromInline static let rowsPerImage: JSString = "rowsPerImage"
    @usableFromInline static let sampleCount: JSString = "sampleCount"
    @usableFromInline static let sampleType: JSString = "sampleType"
    @usableFromInline static let sampler: JSString = "sampler"
    @usableFromInline static let setBindGroup: JSString = "setBindGroup"
    @usableFromInline static let setBlendConstant: JSString = "setBlendConstant"
    @usableFromInline static let setIndexBuffer: JSString = "setIndexBuffer"
    @usableFromInline static let setPipeline: JSString = "setPipeline"
    @usableFromInline static let setScissorRect: JSString = "setScissorRect"
    @usableFromInline static let setStencilReference: JSString = "setStencilReference"
    @usableFromInline static let setVertexBuffer: JSString = "setVertexBuffer"
    @usableFromInline static let setViewport: JSString = "setViewport"
    @usableFromInline static let shaderLocation: JSString = "shaderLocation"
    @usableFromInline static let size: JSString = "size"
    @usableFromInline static let source: JSString = "source"
    @usableFromInline static let sourceMap: JSString = "sourceMap"
    @usableFromInline static let srcFactor: JSString = "srcFactor"
    @usableFromInline static let stencilBack: JSString = "stencilBack"
    @usableFromInline static let stencilClearValue: JSString = "stencilClearValue"
    @usableFromInline static let stencilFront: JSString = "stencilFront"
    @usableFromInline static let stencilLoadOp: JSString = "stencilLoadOp"
    @usableFromInline static let stencilReadMask: JSString = "stencilReadMask"
    @usableFromInline static let stencilReadOnly: JSString = "stencilReadOnly"
    @usableFromInline static let stencilStoreOp: JSString = "stencilStoreOp"
    @usableFromInline static let stencilWriteMask: JSString = "stencilWriteMask"
    @usableFromInline static let stepMode: JSString = "stepMode"
    @usableFromInline static let storageTexture: JSString = "storageTexture"
    @usableFromInline static let storeOp: JSString = "storeOp"
    @usableFromInline static let stripIndexFormat: JSString = "stripIndexFormat"
    @usableFromInline static let submit: JSString = "submit"
    @usableFromInline static let targets: JSString = "targets"
    @usableFromInline static let texture: JSString = "texture"
    @usableFromInline static let timestampWrites: JSString = "timestampWrites"
    @usableFromInline static let toString: JSString = "toString"
    @usableFromInline static let topology: JSString = "topology"
    @usableFromInline static let type: JSString = "type"
    @usableFromInline static let unclippedDepth: JSString = "unclippedDepth"
    @usableFromInline static let unconfigure: JSString = "unconfigure"
    @usableFromInline static let unmap: JSString = "unmap"
    @usableFromInline static let usage: JSString = "usage"
    @usableFromInline static let vendor: JSString = "vendor"
    @usableFromInline static let vertex: JSString = "vertex"
    @usableFromInline static let view: JSString = "view"
    @usableFromInline static let viewDimension: JSString = "viewDimension"
    @usableFromInline static let viewFormats: JSString = "viewFormats"
    @usableFromInline static let visibility: JSString = "visibility"
    @usableFromInline static let wgslLanguageFeatures: JSString = "wgslLanguageFeatures"
    @usableFromInline static let width: JSString = "width"
    @usableFromInline static let writeBuffer: JSString = "writeBuffer"
    @usableFromInline static let writeMask: JSString = "writeMask"
    @usableFromInline static let writeTexture: JSString = "writeTexture"
    @usableFromInline static let writeTimestamp: JSString = "writeTimestamp"
    @usableFromInline static let x: JSString = "x"
    @usableFromInline static let y: JSString = "y"
    @usableFromInline static let z: JSString = "z"
}
